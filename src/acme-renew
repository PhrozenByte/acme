#!/bin/bash
# Renew Let's Encrypt TLS certificates using acme-tiny
# Version 1.9 (build 20230623)
#
# Copyright (c) 2016-2024  Daniel Rudolf <www.daniel-rudolf.de>
#
# This work is licensed under the terms of the MIT license.
# For a copy, see LICENSE file or <https://opensource.org/licenses/MIT>.
#
# SPDX-License-Identifier: MIT
# License-Filename: LICENSE

APP_NAME="$(basename "$0")"
APP_PATH="/var/local/acme"

VERSION="1.9"
BUILD="20230623"

set -eu -o pipefail
export LC_ALL=C.UTF-8
shopt -s nullglob

show_usage() {
    echo "Usage:"
    echo "  $APP_NAME [--verbose|--quiet] [--retry...] [--clean] --all"
    echo "  $APP_NAME [--verbose|--quiet] [--retry...] DOMAIN_NAME..."
}

# read parameters
DOMAINS=()
ALL_DOMAINS="no"
CLEANUP="no"
RETRY=0
VERIFY="yes"
VERBOSE="no"
QUIET="no"

while [ $# -gt 0 ]; do
    if [[ "$1" =~ ^-[a-zA-Z0-9]{2,}$ ]]; then
        read -a SHORT_OPTS <<< $(sed 's/./-& /g' <<< "${1:1}")
        set -- "${SHORT_OPTS[@]}" "${@:2}"
        continue
    fi

    if [ "$1" == "--help" ] || [ "$1" == "-h" ]; then
        show_usage
        echo
        echo "Options:"
        echo "  -a, --all        renew all certificates"
        echo "  -c, --clean      remove dangling challenges on success; requires --all"
        echo "  -r, --retry      retry if renewal fails; can be passed multiple times"
        echo "      --no-verify  don't verify the certificate after renewal"
        echo "  -v, --verbose    explain what is being done"
        echo "  -q, --quiet      suppress status information"
        echo
        echo "Help options:"
        echo "  -h, --help     display this help and exit"
        echo "      --version  output version information and exit"
        echo
        echo "Environment:"
        echo "  ACME_ACCOUNT_KEY_FILE  path to your ACME account private key"
        echo "  ACME_ACCOUNT_CONTACT   contact details for your account"
        echo "  ACME_DIRECTORY_URL     ACME directory URL of the CA to use"
        echo "  TLS_KEY_GROUP          associated group for TLS key files"
        exit 0
    elif [ "$1" == "--version" ]; then
        echo "acme-renew $VERSION ($BUILD)"
        echo "Copyright (c) 2016-2024  Daniel Rudolf"
        echo
        echo "This work is licensed under the terms of the MIT license."
        echo "For a copy, see LICENSE file or <https://opensource.org/licenses/MIT>."
        echo
        echo "Written by Daniel Rudolf <https://www.daniel-rudolf.de/>"
        exit 0
    elif [ "$1" == "--all" ] || [ "$1" == "-a" ]; then
        ALL_DOMAINS="yes"
    elif [ "$1" == "--clean" ] || [ "$1" == "-c" ]; then
        CLEANUP="yes"
    elif [ "$1" == "--retry" ] || [ "$1" == "-r" ]; then
        (( ++RETRY ))
    elif [ "$1" == "--no-verify" ]; then
        VERIFY="no"
    elif [ "$1" == "--verbose" ] || [ "$1" == "-v" ]; then
        VERBOSE="yes"
    elif [ "$1" == "--quiet" ] || [ "$1" == "-q" ]; then
        QUIET="yes"
    else
        DOMAINS+=( "$1" )
    fi

    shift
done

# check parameters and runtime requirements
if [ "$(id -un)" != "acme" ]; then
    echo "$APP_NAME: You must run this as user 'acme'" >&2
    exit 1
elif [ ! -d "$APP_PATH" ]; then
    echo "$APP_NAME: Base directory '$APP_PATH' not found" >&2
    exit 1
elif [ ! -x "$(which acme-issue)" ]; then
    echo "$APP_NAME: 'acme-issue' executable not found" >&2
    exit 1
elif [ ${#DOMAINS[@]} -eq 0 ] && [ "$ALL_DOMAINS" == "no" ]; then
    echo "$APP_NAME: You must either pass a DOMAIN_NAME or --all" >&2
    echo >&2
    show_usage >&2
    exit 1
elif [ "$CLEANUP" == "yes" ] && [ "$ALL_DOMAINS" == "no" ]; then
    echo "$APP_NAME: Passing --clean also requires passing --all" >&2
    echo >&2
    show_usage >&2
    exit 1
fi

# apply parameters
if [ "$QUIET" == "yes" ]; then
    exec 1> /dev/null
    exec 2> /dev/null
    VERBOSE="no"
fi

if [ "$ALL_DOMAINS" == "yes" ]; then
    while IFS="" read -r -u 3 -d $'\0' DOMAIN_PATH; do
        DOMAINS+=( "$(basename "$DOMAIN_PATH")" )
    done 3< <(find "$APP_PATH/live/" -mindepth 1 -maxdepth 1 -type d -print0)
fi

# run acme-issue, if necessary
if [ ${#DOMAINS[@]} -eq 0 ]; then
    [ "$VERBOSE" == "no" ] \
        || echo "No domains to renew, exiting..."
    exit
fi

ISSUE_OPTIONS=()
[ "$VERIFY" == "yes" ] || ISSUE_OPTIONS+=( --no-verify )

FAILED_DOMAINS=()
if [ "$VERBOSE" == "yes" ]; then
    for DOMAIN in "${DOMAINS[@]}"; do
        for (( RETRY_COUNT=0 ; RETRY_COUNT <= RETRY ; RETRY_COUNT++ )); do
            [ $RETRY_COUNT -eq 0 ] \
                && echo "Renewing '$DOMAIN'..." \
                || echo "Retrying renewal of '$DOMAIN' in 60 seconds..."

            [ $RETRY_COUNT -eq 0 ] || sleep 60

            DOMAIN_STATUS=0
            acme-issue --renew "${ISSUE_OPTIONS[@]}" "$DOMAIN" \
                || { DOMAIN_STATUS=$?; true; }

            if [ $DOMAIN_STATUS -eq 0 ]; then
                echo "Successfully renewed '$DOMAIN'"
                break
            fi

            echo "Renewal of '$DOMAIN' failed"
        done

        if [ $DOMAIN_STATUS -ne 0 ]; then
            [ $RETRY -eq 0 ] || echo "Giving up renewal of '$DOMAIN'"
            FAILED_DOMAINS+=( "$DOMAIN" )
        fi
    done

    if [ ${#FAILED_DOMAINS[@]} -gt 0 ]; then
        echo "$APP_NAME: Renewal of one or more domains failed" >&2
        printf '    - %s\n' "${FAILED_DOMAINS[@]}" >&2
        exit 1
    fi
else
    for DOMAIN in "${DOMAINS[@]}"; do
        for (( RETRY_COUNT=0 ; RETRY_COUNT <= RETRY ; RETRY_COUNT++ )); do
            [ $RETRY_COUNT -eq 0 ] \
                && echo -n "Renewing '$DOMAIN'..." \
                || echo -n "Retrying '$DOMAIN'..."

            [ $RETRY_COUNT -eq 0 ] || sleep 60

            DOMAIN_STATUS=0
            acme-issue --renew "${ISSUE_OPTIONS[@]}" "$DOMAIN" > /dev/null 2>&1 \
                || { DOMAIN_STATUS=$?; true; }

            if [ $DOMAIN_STATUS -eq 0 ]; then
                echo " success"
                break
            fi

            echo " failed"
        done

        if [ $DOMAIN_STATUS -ne 0 ]; then
            FAILED_DOMAINS+=( "$DOMAIN" )
        fi
    done

    if [ ${#FAILED_DOMAINS[@]} -gt 0 ]; then
        exit 1
    fi
fi

# delete dangling ACME challenges
if [ "$CLEANUP" == "yes" ]; then
    echo "Deleting dangling ACME challenges..."

    for CHALLENGE_FILE in "$APP_PATH/challenges/"*; do
        CHALLENGE="$(basename "$CHALLENGE_FILE")"
        if [[ "$CHALLENGE" =~ ^[a-zA-Z0-9_-]{43}$ ]]; then
            [ "$VERBOSE" == "no" ] \
                || echo "Deleting challenge '$CHALLENGE'..."

            rm -f "$CHALLENGE_FILE"
        fi
    done
fi
