#!/bin/bash
# Issue Let's Encrypt TLS certificate using acme-tiny
# Version 1.9 (build 20230623)
#
# Copyright (c) 2016-2024  Daniel Rudolf <www.daniel-rudolf.de>
#
# This work is licensed under the terms of the MIT license.
# For a copy, see LICENSE file or <https://opensource.org/licenses/MIT>.
#
# SPDX-License-Identifier: MIT
# License-Filename: LICENSE

APP_NAME="$(basename "$0")"
APP_PATH="/var/local/acme"
CONFIG_PATH="/etc/acme"

VERSION="1.9"
BUILD="20230623"

set -eu -o pipefail
export LC_ALL=C.UTF-8
umask 022

show_usage() {
    echo "Usage:"
    echo "  $APP_NAME [--force] DOMAIN_NAME [DOMAIN_ALIAS...]"
    echo "  $APP_NAME --renew DOMAIN_NAME"
}

# read parameters
DOMAIN=""
DOMAIN_ALIASES=()
RENEW="no"
FORCE="no"
VERIFY="yes"

while [ $# -gt 0 ]; do
    if [[ "$1" =~ ^-[a-zA-Z0-9]{2,}$ ]]; then
        read -a SHORT_OPTS <<< $(echo "${1:1}" | sed 's/./-& /g')
        set -- "${SHORT_OPTS[@]}" "${@:2}"
        continue
    fi

    if [ "$1" == "--help" ] || [ "$1" == "-h" ]; then
        show_usage
        echo
        echo "Options:"
        echo "  -r, --renew      renew an existing certificate"
        echo "  -f, --force      issue a new certificate even though there is another"
        echo "                   certificate for this DOMAIN_NAME"
        echo "      --no-verify  don't verify the certificate after issuance"
        echo
        echo "Help options:"
        echo "  -h, --help     display this help and exit"
        echo "      --version  output version information and exit"
        echo
        echo "Environment:"
        echo "  ACME_ACCOUNT_KEY_FILE  path to your ACME account private key"
        echo "  ACME_ACCOUNT_CONTACT   contact details for your account"
        echo "  ACME_DIRECTORY_URL     ACME directory URL of the CA to use"
        echo "  TLS_KEY_GROUP          associated group for TLS key files"
        exit 0
    elif [ "$1" == "--version" ]; then
        echo "acme-issue $VERSION ($BUILD)"
        echo "Copyright (c) 2016-2024  Daniel Rudolf"
        echo
        echo "This work is licensed under the terms of the MIT license."
        echo "For a copy, see LICENSE file or <https://opensource.org/licenses/MIT>."
        echo
        echo "Written by Daniel Rudolf <https://www.daniel-rudolf.de/>"
        exit 0
    elif [ "$1" == "--renew" ] || [ "$1" == "-r" ]; then
        RENEW="yes"
    elif [ "$1" == "--force" ] || [ "$1" == "-f" ]; then
        FORCE="yes"
    elif [ "$1" == "--no-verify" ]; then
        VERIFY="no"
    elif [ -z "$DOMAIN" ]; then
        DOMAIN="$1"
    else
        DOMAIN_ALIASES+=( "$1" )
    fi

    shift
done

# check parameters and runtime requirements
if [ "$(id -un)" != "acme" ]; then
    echo "$APP_NAME: You must run this as user 'acme'" >&2
    exit 1
elif [ ! -d "$APP_PATH" ]; then
    echo "$APP_NAME: Base directory '$APP_PATH' not found" >&2
    exit 1
elif [ ! -d "$CONFIG_PATH" ]; then
    echo "$APP_NAME: Config directory '$CONFIG_PATH' not found" >&2
    exit 1
elif [ ! -x "$(which openssl)" ]; then
    echo "$APP_NAME: 'openssl' executable not found" >&2
    exit 1
elif [ ! -x "$(which acme-tiny)" ]; then
    echo "$APP_NAME: 'acme-tiny' executable not found" >&2
    exit 1
elif [ -z "$DOMAIN" ]; then
    echo "$APP_NAME: You must pass a DOMAIN_NAME" >&2
    echo >&2
    show_usage >&2
    exit 1
fi

# include config file
if [ -f "$CONFIG_PATH/config.env" ]; then
    . "$CONFIG_PATH/config.env"
fi

ACME_ACCOUNT_KEY_FILE="${ACME_ACCOUNT_KEY_FILE:-$CONFIG_PATH/account.key}"
ACME_ACCOUNT_CONTACT="${ACME_ACCOUNT_CONTACT:-}"
ACME_DIRECTORY_URL="${ACME_DIRECTORY_URL:-}"
TLS_KEY_GROUP="${TLS_KEY_GROUP:-}"

# check account key
if [ ! -e "$ACME_ACCOUNT_KEY_FILE" ]; then
    echo "$APP_NAME: Invalid account key '$ACME_ACCOUNT_KEY_FILE': No such file or directory" >&2
    exit 1
fi

# check target directory
if [ "$RENEW" == "no" ]; then
    if [ -d "$APP_PATH/archive/$DOMAIN" ] && [ "$FORCE" == "no" ]; then
        echo "$APP_NAME: Conflicting target directory '$APP_PATH/archive/$DOMAIN' found" >&2
        echo "$APP_NAME: Use --force to suppress this error" >&2
        exit 1
    fi
else
    if [ ! -d "$APP_PATH/live/$DOMAIN" ]; then
        echo "$APP_NAME: No certificate to renew found" >&2
        exit 1
    fi
fi

# prepare subjectAltName (SAN)
SAN=""
if [ "$RENEW" == "no" ]; then
    SAN="DNS:$DOMAIN"
    for DOMAIN_ALIAS in "${DOMAIN_ALIASES[@]}"; do
        SAN+=", DNS:$DOMAIN_ALIAS"
    done
else
    if [ ${#DOMAIN_ALIASES[@]} -gt 0 ]; then
        echo "$APP_NAME: You mustn't pass domain aliases when renewing a certificate" >&2
        echo "$APP_NAME: Use --force instead of --renew to issue a new certificate" >&2
        exit 1
    fi

    SAN="$(openssl x509 -noout -text -in "$APP_PATH/live/$DOMAIN/cert.pem" \
        | awk '/X509v3 Subject Alternative Name/ {getline; sub(/^[ \t]+/, ""); sub(/[ \t]+$/, ""); print}')"
fi

# write to fd3 to indent output
exec 3> >(sed 's/^/    /g')

# create target directory
echo "Preparing target directory..."

DATE="$(date --utc +'%FT%TZ')"
mkdir -p "$APP_PATH/archive/$DOMAIN/$DATE"

# generate private key
echo "Generating private key..."

( umask 027 && openssl genrsa -out "$APP_PATH/archive/$DOMAIN/$DATE/key.pem" 4096 2>&3 )
chmod 640 "$APP_PATH/archive/$DOMAIN/$DATE/key.pem"
[ -z "$TLS_KEY_GROUP" ] || chgrp "$TLS_KEY_GROUP" "$APP_PATH/archive/$DOMAIN/$DATE/key.pem"

if ! openssl rsa -in "$APP_PATH/archive/$DOMAIN/$DATE/key.pem" -check -noout > /dev/null 2>&1; then
    echo "$APP_NAME: Invalid private key '$APP_PATH/archive/$DOMAIN/$DATE/key.pem'" >&2
    exit 1
fi

# create CSR
echo "Creating CSR..."

OPENSSL_CONFIG="$(mktemp)"
cat "/etc/ssl/openssl.cnf" <(printf "[SAN]\nsubjectAltName=%s\n" "$SAN") \
    > "$OPENSSL_CONFIG"

openssl req -new -sha256 \
    -key "$APP_PATH/archive/$DOMAIN/$DATE/key.pem" \
    -subj "/" -reqexts SAN -config "$OPENSSL_CONFIG" \
    -out "$APP_PATH/archive/$DOMAIN/$DATE/csr.pem"

rm "$OPENSSL_CONFIG"

if ! openssl req -in "$APP_PATH/archive/$DOMAIN/$DATE/csr.pem" -verify -noout > /dev/null 2>&1; then
    echo "$APP_NAME: Invalid CSR '$APP_PATH/archive/$DOMAIN/$DATE/csr.pem'" >&2
    exit 1
fi

# issue certificate using acme-tiny
echo "Issuing certificate..."

ACME_OPTIONS=( --account-key "$ACME_ACCOUNT_KEY_FILE" )
[ -z "$ACME_ACCOUNT_CONTACT" ] || ACME_OPTIONS+=( --contact "$ACME_ACCOUNT_CONTACT" )
[ -z "$ACME_DIRECTORY_URL" ] || ACME_OPTIONS+=( --directory-url "$ACME_DIRECTORY_URL" )

acme-tiny \
    --csr "$APP_PATH/archive/$DOMAIN/$DATE/csr.pem" \
    --acme-dir "$APP_PATH/challenges" \
    --disable-check \
    "${ACME_OPTIONS[@]}" 2>&3 \
    > "$APP_PATH/archive/$DOMAIN/$DATE/fullchain.pem"

sleep 0.5

if ! openssl x509 -in "$APP_PATH/archive/$DOMAIN/$DATE/fullchain.pem" -noout > /dev/null 2>&1; then
    echo "$APP_NAME: Invalid certificate chain '$APP_PATH/archive/$DOMAIN/$DATE/fullchain.pem'" >&2
    exit 1
fi

# split fullchain.pem into cert.pem and chain.pem
echo "Splitting certificate chain..."

awk -v out_dir="$APP_PATH/archive/$DOMAIN/$DATE/" -v out_file="cert.pem" \
    -e '/^-----BEGIN CERTIFICATE-----$/{cert=1}' \
    -e 'cert{print > out_dir out_file}' \
    -e '/^-----END CERTIFICATE-----$/{cert=0; out_file="chain.pem"}' \
    -- "$APP_PATH/archive/$DOMAIN/$DATE/fullchain.pem"

if ! openssl x509 -in "$APP_PATH/archive/$DOMAIN/$DATE/cert.pem" -noout > /dev/null 2>&1; then
    echo "$APP_NAME: Invalid certificate '$APP_PATH/archive/$DOMAIN/$DATE/cert.pem'" >&2
    exit 1
fi

if [ ! -e "$APP_PATH/archive/$DOMAIN/$DATE/chain.pem" ]; then
    touch "$APP_PATH/archive/$DOMAIN/$DATE/chain.pem"
elif ! openssl x509 -in "$APP_PATH/archive/$DOMAIN/$DATE/chain.pem" -noout > /dev/null 2>&1; then
    echo "$APP_NAME: Invalid intermediate certificate(s) '$APP_PATH/archive/$DOMAIN/$DATE/chain.pem'" >&2
    exit 1
fi

# verify cert chain
if [ "$VERIFY" == "yes" ]; then
    echo "Verifying certificate..."

    VERIFY_OPTIONS=( -x509_strict -policy_check )
    VERIFY_OPTIONS+=( -purpose sslserver -verify_name ssl_server )
    VERIFY_OPTIONS+=( -verify_hostname "$DOMAIN" )
    [ ! -s "$APP_PATH/archive/$DOMAIN/$DATE/chain.pem" ] \
        || VERIFY_OPTIONS+=( -untrusted "$APP_PATH/archive/$DOMAIN/$DATE/chain.pem" )

    VERIFY_STATUS="$(openssl verify "${VERIFY_OPTIONS[@]}" "$APP_PATH/archive/$DOMAIN/$DATE/cert.pem" 2>&1)"
    VERIFY_EXIT=$?

    if [ $VERIFY_EXIT -ne 0 ] || [ "$VERIFY_STATUS" != "$APP_PATH/archive/$DOMAIN/$DATE/cert.pem: OK" ]; then
        echo "$APP_NAME: Verification of '$APP_PATH/archive/$DOMAIN/$DATE/cert.pem' failed" >&2
        echo "$APP_NAME: \`openssl verify\` (exit code $VERIFY_EXIT) returned:" >&2
        sed 's/^/    /g' <<< "$VERIFY_STATUS" >&2
        exit 1
    fi
fi

# copy files to live dir (deployment)
echo "Deploying certificate..."
[ -d "$APP_PATH/live/$DOMAIN" ] || mkdir "$APP_PATH/live/$DOMAIN"
cp "$APP_PATH/archive/$DOMAIN/$DATE/key.pem" \
    "$APP_PATH/archive/$DOMAIN/$DATE/cert.pem" \
    "$APP_PATH/archive/$DOMAIN/$DATE/chain.pem" \
    "$APP_PATH/archive/$DOMAIN/$DATE/fullchain.pem" \
    "$APP_PATH/live/$DOMAIN/"

exec 3>&-
exit 0
