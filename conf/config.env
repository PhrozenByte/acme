# /etc/acme/config.env

#
# Path to your ACME account private key
#
# To identify yourself to your CA (e.g. Let's Encrypt) you must first create
# a private key to sign your requests. You can either use an existing account
# key, or create a new one using OpenSSL (`openssl genrsa 4096 > account.key`),
# then set the account key's path here.
#
#ACME_ACCOUNT_KEY_FILE="/etc/acme/account.key"

#
# Contact details for your account
#
# When signing public certs it is highly recommended to let your CA know how
# they can get in touch with you if something is wrong with your certs. Provide
# an email address to use here (e.g. 'mailto:certs@example.com').
#
#ACME_ACCOUNT_CONTACT=""

#
# ACME directory URL of the Certificate Authority to use
#
# This script will sign certs with Let's Encrypt by default, but ACME is an
# open protocol, that can be utilized by other CAs, too. If you prefer to use
# another CA simply configure their ACME directory URL here.
#
#ACME_DIRECTORY_URL="https://acme-v02.api.letsencrypt.org/directory"

#
# Associated group for TLS key files
#
# Other software using your certs must have permission to access the files
# created by this script. All certs (`cert.pem`), chain certs (`chain.pem` and
# `fullchain.pem`) and CSRs (`csr.pem`) are world-readable (0644 permissions,
# i.e. 'u=rw,g=r,o=r'). However, access to keys (`key.pem`) is limited to the
# file owner and group (0640 permissions, i.e. 'u=rw,g=r,o='). All files are
# owned by the 'acme' user and its primary group by default, usually 'acme'.
# Services not running as user 'root' will therefore fail to read the required
# TLS key. To solve this issue some distributions use a common group for
# unprivileged services to access TLS keys, e.g. group 'ssl-cert'. Simply
# configure this group here and all new key files will be associated with
# this group. Note that user 'acme' must be a member of this group.
#
#TLS_KEY_GROUP=""

#
# Path to a list of revoked certificate fingerprints
#
# `acme-check` will verify a cert's validity by ensuring that the cert and all
# its intermediate certs are valid X.509 certs, form a complete and trusted
# chain, have not expired yet, match their supposed type and common name (CN),
# and have not been revoked. Revocation status is checked using the OCSP
# endpoint declared within the cert. Alternatively, one can add the unique
# SHA-256 fingerprints of revoked certs to a file whose path is configured
# using this setting (e.g. "$APP_PATH/revocations.txt"). The file must contain
# SHA-256 cert fingerprints in grouped Hex notation (e.g. '0D:15:EA:5E:â€¦'), one
# fingerprint per line. Any content following a hash symbol ('#') is considered
# a comment and ignored. Lines not matching this scheme will cause `acme-check`
# to bail.
#
#FP_REVOCATION_LIST=""
